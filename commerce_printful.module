<?php

use Printful\Exceptions\PrintfulApiException;
use Printful\Exceptions\PrintfulException;
use Printful\PrintfulApiClient;

/**
 * Implements hook_menu().
 *
 * Adds the Commerce Printful configuration page.
 */
function commerce_printful_menu() {
  $items = array();
  $items['admin/config/services/printful'] = array(
    'title' => 'Printful API',
    'description' => 'Configure the Printful API integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_printful_admin_settings'),
    'access arguments' => array('administer commerce printful'),
    'file' => 'commerce_printful.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 *
 * Creates a permission for accessing the Commerce Printful
 * configuration page.
 */
function commerce_printful_permission() {
  $perms = array();
  $perms['administer commerce printful'] = array(
    'title' => t('Administer Printful API'),
  );
  return $perms;
}

/**
 * Function to check an order for Printful items.
 */
function commerce_printful_is_printful_order($order) {
  $has_printful = FALSE;
  if ($order) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      if ($line_item_wrapper->__isset('commerce_product')) {
        $product = commerce_product_load($line_item_wrapper->commerce_product->raw());
        if ($product->type == 'printful') {
          $has_printful = TRUE;
          break;
        }
      }
    }
  }
  return $has_printful;
}

/**
 * Utility function for converting Commerce Shipping method IDs
 * to their matching Printful shipping IDs.
 */
function commerce_printful_shipping_map($id) {
  $map = array(
    'usps_first_class' => 'USPS_FIRST',
    'usps_priority_mail' => 'USPS_PRIORITY',
    'usps_pmi' => '',
    'usps_express_mail' => '',
  );
  return (!empty($map[$id])) ? $map[$id] : FALSE;
}

/**
 * Function for getting order shipping rates from the Printful API.
 */
function commerce_printful_get_printful_shipping($order) {
  $printful_shipping = &drupal_static(__FUNCTION__);

  if (!isset($printful_shipping)) {
    $printful_shipping = array();

    if ($order) {
      $printful_items = array();
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

      $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();
      if (empty($shipping_address['administrative_area']) || empty($shipping_address['country']) || empty($shipping_address['postal_code'])) {
        return $printful_shipping;
      }

      foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
        // Check for Printful product types.
        if ($line_item_wrapper->__isset('commerce_product')) {
          if ($line_item_wrapper->commerce_product->type->value() == 'printful') {

            // Load the product object.
            $product = commerce_product_load($line_item_wrapper->commerce_product->raw());

            // Get the Printful product_id and variant_id from the SKU.
            $identifiers = explode('-', $product->sku);
            $printful_product_id = $identifiers[0];
            $printful_variant_id = $identifiers[1];

            $printful_items[] = array(
              'variant_id' => $printful_variant_id,
              'quantity' => 1,
              'files' => array(
                array('url' => 'http://example.com/files/posters/poster_1.jpg'),
              ),
            );
          }
        }
      }

      $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

      // Prepare the Printful order request.
      $request = array(
        'recipient' => array(
          'name' => $shipping_address['name_line'],
          'address1' => $shipping_address['thoroughfare'],
          'city' => $shipping_address['locality'],
          'state_code' => $shipping_address['administrative_area'],
          'country_code' => $shipping_address['country'],
          'zip' => $shipping_address['postal_code'],
        ),
        'items' => $printful_items,
        'currency' => $currency_code,
      );

      $pf = new PrintfulApiClient(variable_get('commerce_printful_api_key', ''));

      try {
        $printful_shipping = $pf->post('shipping/rates', $request);
      } catch (PrintfulApiException $e) {
        watchdog('commerce_printful', 'Printful API Exception: ' . $e->getCode() . ' ' . $e->getMessage());
      } catch (PrintfulException $e) {
        watchdog('commerce_printful', 'Printful Exception: ' . $e->getMessage());
        watchdog('commerce_printful', $pf->getLastResponseRaw());
      }
    }
  }

  return $printful_shipping;
}

/**
 * Function for getting tax rates from the Printful API.
 */
function commerce_printful_tax_rate($order) {
  $tax_rate = &drupal_static(__FUNCTION__);

  if (!isset($tax_rate)) {
    $tax_rate = array();

    if ($order && commerce_printful_is_printful_order($order)) {

      $pf = new PrintfulApiClient(variable_get('commerce_printful_api_key', ''));

      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();

      if (!empty($shipping_address['administrative_area']) && !empty($shipping_address['postal_code']) && !empty($shipping_address['country'])) {

        $request = array(
          'recipient' => array(
            'state_code' => $shipping_address['administrative_area'],
            'country_code' => $shipping_address['country'],
            'zip' => $shipping_address['postal_code'],
          ),
        );

        try {
          $tax_rate = $pf->post('tax/rates', $request);
        } catch (PrintfulApiException $e) {
          watchdog('commerce_printful', 'Printful API Exception: ' . $e->getCode() . ' ' . $e->getMessage());
        } catch (PrintfulException $e) {
          watchdog('commerce_printful', 'Printful Exception: ' . $e->getMessage());
          watchdog('commerce_printful', $pf->getLastResponseRaw());
        }

      }
    }
  }

  return $tax_rate;
}

/**
 * Function for getting taxable states from the Printful API.
 */
function commerce_printful_taxable_states() {
  $taxable_states = &drupal_static(__FUNCTION__);

  if (!isset($taxable_states)) {
    $taxable_states = array();

    // Only consult Printful for the taxable states if this order contains Printful items.
    global $user;
    $order = commerce_cart_order_load($user->uid);
    if ($order && commerce_printful_is_printful_order($order)) {

      $pf = new PrintfulApiClient(variable_get('commerce_printful_api_key', ''));

      try {
        $printful_tax_countries = $pf->get('tax/countries');
      } catch (PrintfulApiException $e) {
        watchdog('commerce_printful', 'Printful API Exception: ' . $e->getCode() . ' ' . $e->getMessage());
      } catch (PrintfulException $e) {
        watchdog('commerce_printful', 'Printful Exception: ' . $e->getMessage());
        watchdog('commerce_printful', $pf->getLastResponseRaw());
      }

      if (!empty($printful_tax_countries) && is_array($printful_tax_countries)) {
        foreach ($printful_tax_countries as $tax_country) {
          if (!empty($tax_country['code']) && $tax_country['code'] == 'US' && !empty($tax_country['states']) && is_array($tax_country['states'])) {
            foreach ($tax_country['states'] as $tax_state) {
              if (!empty($tax_state['code']) && !empty($tax_state['name'])) {
                $taxable_states[$tax_state['code']] = array(
                  'name' => $tax_state['name'],
                  'shipping_taxable' => (!empty($tax_state['shipping_taxable'])),
                );
              }
            }
          }
        }
      }

    }
  }

  return $taxable_states;
}

/**
 * Implements hook_commerce_tax_type_calculate_rates().
 *
 * Checks an order for a shipping address matching states where
 * Printful operates fulfillment centers and adds the tax costs
 * to orders accordingly.
 */
function commerce_printful_commerce_tax_type_calculate_rates($tax_type, $line_item) {
  // Is this a sales tax calculation?
  if ($tax_type['name'] != 'sales_tax') {
    return;
  }

  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  // Is this a Printful item?
  if (!$line_item_wrapper->__isset('commerce_product')) {
    return;
  }

  $product = commerce_product_load($line_item_wrapper->commerce_product->raw());
  if ($product->type != 'printful') {
    return;
  }

  $taxable_states = commerce_printful_taxable_states();
  $order = $line_item_wrapper->order->value();
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();

  // Do we have the required shipping address values?
  if (empty($shipping_address['administrative_area']) || !in_array($shipping_address['administrative_area'], array_keys($taxable_states))) {
    return;
  }

  $printful_tax_rate = commerce_printful_tax_rate($order);
  if (!empty($printful_tax_rate)) {

    $tax_state = $taxable_states[$shipping_address['administrative_area']];
    $type = strtr(strtolower('tax|' . $tax_state['name'] . ' ' . t('Sales Tax')), ' ', '_');

    $price = $line_item_wrapper->commerce_unit_price->value();
    $amount = commerce_round(COMMERCE_ROUND_HALF_UP, ($price['amount'] * $printful_tax_rate['rate']));

    $component_price = array(
      'amount' => $amount,
      'currency_code' => $price['currency_code'],
      'data' => array(),
    );

    // Add the tax component to the line item.
    $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add($price, $type, $component_price, FALSE);

  }
}

/**
 * Implements hook_commerce_price_component_type_info().
 *
 * Creates tax pricing components for each of the states in which
 * Printful operates fulfillment centers.
 */
function commerce_printful_commerce_price_component_type_info() {
  $components = array();
  foreach (commerce_printful_taxable_states() as $code => $state) {
    $title = $state['name'] . ' ' . t('Sales Tax');
    $components[strtr(strtolower('tax|' . $title), ' ', '_')] = array(
      'title' => $title,
      'display_title' => $title,
    );
  }
  return $components;
}

/**
 * Implements hook_commerce_checkout_complete().
 *
 * Prepares the request and submits the final order to Printful
 * for fulfillment.
 */
function commerce_printful_commerce_checkout_complete($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

  // Prepare the Printful request.
  $items = array();
  $shipping_data = array();

  $order_totals = $order_wrapper->commerce_order_total->value();

  $order_total = commerce_currency_amount_to_decimal($order_totals['amount'], $currency_code);

  $order_subtotal = commerce_price_component_total($order_totals, 'base_price');
  $order_subtotal = commerce_currency_amount_to_decimal($order_subtotal['amount'], $currency_code);

  $order_shipping = commerce_price_component_total($order_totals, 'shipping');
  $order_shipping = commerce_currency_amount_to_decimal($order_shipping['amount'], $currency_code);

  $order_tax = 0;
  foreach ($order_totals['data']['components'] as $component) {
    if (substr($component['name'], 0, 3) == 'tax') {
      $order_tax = commerce_round(COMMERCE_ROUND_HALF_UP, $component['price']['amount']);
    }
  }
  $order_tax = commerce_currency_amount_to_decimal($order_tax, $currency_code);

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $product = commerce_product_load($line_item_wrapper->commerce_product->raw());
      if ($product->type == 'printful') {

        // Get the Printful product_id and variant_id from the SKU.
        $identifiers = explode('-', $product->sku);
        $printful_product_id = $identifiers[0];
        $printful_variant_id = $identifiers[1];

        $price = $line_item_wrapper->commerce_unit_price->value();

        $items[] = array(
          'variant_id' => $printful_variant_id,
          'external_id' => $line_item_wrapper->line_item_id->value(),
          'name' => $product->title,
          'sku' => $product->sku,
          'quantity' => (int) $line_item_wrapper->quantity->value(),
          'retail_price' => commerce_currency_amount_to_decimal($price['amount'], $currency_code),
          'files' => array(
            array('url' => 'http://example.com/files/posters/poster_1.jpg'),
          ),
        );

      }
    }
    elseif ($line_item_wrapper->type->value() == 'shipping') {
      $shipping_data = $line_item_wrapper->value()->data;
    }
  }

  // Get the shipping address.
  $shipping_address = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();

  // Get the Printful shipping method ID.
  $shipping_method = commerce_printful_shipping_map($shipping_data['shipping_service']['name']);

  // Create the Printful order request array.
  $request = array(
    'external_id' => $order->order_id,
    'status' => 'draft',
    'shipping' => (!empty($shipping_method) ? $shipping_method : 'STANDARD'),
    'recipient' => array(
      'name' => $shipping_address['name_line'],
      'address1' => $shipping_address['thoroughfare'],
      'city' => $shipping_address['locality'],
      'state_code' => $shipping_address['administrative_area'],
      'country_code' => $shipping_address['country'],
      'zip' => $shipping_address['postal_code'],
    ),
    'items' => $items,
    'retail_costs' => array(
      'subtotal' => $order_subtotal,
      'shipping' => $order_shipping,
      'tax' => $order_tax,
      'total' => $order_total,
    ),
  );

  // Submit the request to Printful.
  $pf = new PrintfulApiClient(variable_get('commerce_printful_api_key', ''));
  try {
    // Post the order to Printful.
    $printful_order = $pf->post('orders', $request);
    watchdog('commerce_printful', 'Order ' . $order->order_id . ' successfully sent to Printful.');
  } catch (PrintfulApiException $e) {
    watchdog('commerce_printful', 'Printful API Exception: ' . $e->getCode() . ' ' . $e->getMessage());
  } catch (PrintfulException $e) {
    watchdog('commerce_printful', 'Printful Exception: ' . $e->getMessage());
    watchdog('commerce_printful', $pf->getLastResponseRaw());
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add a custom submit handler to the first checkout page form
 * for adding shipping costs to orders which only contain
 * shippable products from Printful.
 */
function commerce_printful_form_commerce_checkout_form_alter(&$form, &$form_state, $form_id) {
  dsm($form);
  $form['buttons']['continue']['#submit'][] = 'commerce_printful_add_shipping_cost';
}

/**
 * Submit handler which checks to see if an order contains only
 * shippable products fulfilled by Printful and adds a custom
 * shipping line item and matching pricing component if so.
 */
function commerce_printful_add_shipping_cost($form, &$form_state) {
dsm($form);
  global $user;
  $order = commerce_cart_order_load($user->uid);

  // Only add the custom shipping line item and pricing component if the
  // order has no weight and contains at least one Printful item.
  if (module_exists('commerce_physical') && commerce_printful_is_printful_order($order)) {
    $weight = commerce_physical_order_weight($order, 'lb');
    if (!is_array($weight) || $weight['weight'] == NULL) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      $currency = $order_wrapper->commerce_order_total->currency_code->value();
      $printful_shipping = commerce_printful_get_printful_shipping($order);
      dsm($printful_shipping);
    }
  }
}

/**
 * Implements hook_commerce_checkout_page_info().
 *
 * For sites that don't use commerce_shipping, we need to define the shipping page.
 *
 */
function commerce_printful_commerce_checkout_page_info() {
  if (!module_exists('commerce_shipping')) {
    $checkout_pages = array();

    $checkout_pages['shipping'] = array(
      'title' => t('Shipping'),
      'weight' => 5,
    );

    return $checkout_pages;
  }
}

/**
 * Implements hook_commerce_checkout_pane_info().
 */
function commerce_printful_commerce_checkout_pane_info() {
  $checkout_panes = array();

  $checkout_panes['commerce_printful_shipping'] = array(
    'title' => t('Shipping service'),
    'base' => 'commerce_printful_shipping_pane',
    'file' => 'includes/commerce_printful_shipping.checkout_pane.inc',
    'page' => 'shipping',
    'weight' => 2,
    'review' => FALSE,
  );

  return $checkout_panes;
}
