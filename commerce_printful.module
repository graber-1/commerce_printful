<?php

/**
 * @file
 * Provides Printful integration for Drupal Commerce.
 */

use Printful\Exceptions\PrintfulApiException;
use Printful\Exceptions\PrintfulException;
use Printful\PrintfulApiClient;
use Printful\PrintfulMockupGenerator;
use Printful\Structures\Generator\MockupGenerationParameters;
use Printful\Structures\Generator\MockupPositionItem;
use Printful\Structures\Placements;

/**
 * Implements hook_menu().
 *
 * Adds the Commerce Printful configuration page.
 */
function commerce_printful_menu() {
  $items = array();

  $items['admin/commerce/config/printful'] = array(
    'title' => 'Printful',
    'description' => 'Configure the Printful API integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_printful_admin_settings'),
    'access arguments' => array('administer commerce printful'),
    'file' => 'commerce_printful.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 0,
  );

  $items['commerce-printful/print-file-settings/%/%/%/%ctools_js'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'commerce_printful_print_file_settings_modal',
      2,
      3,
      4,
      5,
    ),
    'theme callback' => 'ajax_base_page_theme',
    'access arguments' => array('administer commerce printful'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 *
 * Creates a permission for accessing the Commerce Printful
 * configuration page.
 */
function commerce_printful_permission() {
  $perms = array();
  $perms['administer commerce printful'] = array(
    'title' => t('Administer Printful API'),
  );
  return $perms;
}

/**
 * Function to check an order for Printful items.
 */
function commerce_printful_is_printful_order($order) {
  $has_printful = FALSE;
  if ($order) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      if ($line_item_wrapper->__isset('commerce_product')) {
        $product = commerce_product_load($line_item_wrapper->commerce_product->raw());
        if ($product->type == 'printful') {
          $has_printful = TRUE;
          break;
        }
      }
    }
  }
  return $has_printful;
}

/**
 * Function for getting order shipping rates from the Printful API.
 */
function commerce_printful_get_printful_shipping($order, $shipping_address) {
  $shipping_rates = &drupal_static(__FUNCTION__);

  if (!isset($shipping_rates)) {
    $shipping_rates = array();

    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

    // Prepare the items array for the shipping rate request.
    $items = array();
    foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      // Check for Printful product types.
      if ($line_item_wrapper->__isset('commerce_product')) {
        if ($line_item_wrapper->commerce_product->type->value() == 'printful') {

          // Load the product object.
          $product = commerce_product_load($line_item_wrapper->commerce_product->raw());
          $product_wrapper = entity_metadata_wrapper('commerce_product', $product);

          $items[] = array(
            'variant_id' => $product_wrapper->field_printful_variant_id->value(),
            'quantity' => (int) $line_item_wrapper->quantity->value(),
            'files' => array(
              array('url' => 'http://example.com/files/posters/poster_1.jpg'),
            ),
          );
        }
      }
    }

    // Prepare the shipping rate request.
    $request = array(
      'recipient' => array(
        'name' => $shipping_address['name_line'],
        'address1' => $shipping_address['thoroughfare'],
        'city' => $shipping_address['locality'],
        'state_code' => $shipping_address['administrative_area'],
        'country_code' => $shipping_address['country'],
        'zip' => $shipping_address['postal_code'],
      ),
      'items' => $items,
      'currency' => $currency_code,
    );

    $pf = new PrintfulApiClient(variable_get('commerce_printful_api_key', ''));

    $response = FALSE;
    try {
      $response = $pf->post('shipping/rates', $request);
    }
    catch (PrintfulApiException $e) {
      watchdog('commerce_printful', 'Printful API Exception: %code %message', array('%code' => $e->getCode(), '%message' => $e->getMessage()));
    }
    catch (PrintfulException $e) {
      watchdog('commerce_printful', 'Printful Exception: %message', array('%message' => $e->getMessage()));
      watchdog('commerce_printful', $pf->getLastResponseRaw());
    }

    if ($response) {
      foreach ($response as $r) {
        $service = commerce_printful_shipping_service_by_id($r['id']);
        if (!empty($service['machine_name'])) {
          $shipping_rates[$service['machine_name']] = array(
            'amount' => commerce_currency_decimal_to_amount((string) $r['rate'], $currency_code),
            'currency_code' => $currency_code,
            'data' => array(),
          );
        }
      }
    }
  }

  return $shipping_rates;
}

/**
 * Function for getting tax rates from the Printful API.
 */
function commerce_printful_tax_rate($order) {
  $tax_rate = &drupal_static(__FUNCTION__);

  if (!isset($tax_rate)) {
    $tax_rate = array();

    if (commerce_printful_is_printful_order($order)) {

      $shipping_address = commerce_printful_get_order_shipping_address($order);

      if (!empty($shipping_address['administrative_area']) && !empty($shipping_address['postal_code']) && !empty($shipping_address['country'])) {

        $pf = new PrintfulApiClient(variable_get('commerce_printful_api_key', ''));

        $request = array(
          'recipient' => array(
            'state_code' => $shipping_address['administrative_area'],
            'country_code' => $shipping_address['country'],
            'zip' => $shipping_address['postal_code'],
          ),
        );

        try {
          $tax_rate = $pf->post('tax/rates', $request);
        }
        catch (PrintfulApiException $e) {
          watchdog('commerce_printful', 'Printful API Exception: %code %message', array('%code' => $e->getCode(), '%message' => $e->getMessage()));
        }
        catch (PrintfulException $e) {
          watchdog('commerce_printful', 'Printful Exception: %message', array('%message' => $e->getMessage()));
          watchdog('commerce_printful', $pf->getLastResponseRaw());
        }

      }
    }
  }

  return $tax_rate;
}

/**
 * Function for getting taxable states from the Printful API.
 */
function commerce_printful_taxable_states() {
  $taxable_states = &drupal_static(__FUNCTION__);

  if (!isset($taxable_states)) {
    $taxable_states = array();

    // Only consult Printful for the taxable states if this order contains
    // Printful items.
    global $user;
    $order = commerce_cart_order_load($user->uid);
    if (commerce_printful_is_printful_order($order)) {

      $pf = new PrintfulApiClient(variable_get('commerce_printful_api_key', ''));

      try {
        $response = $pf->get('tax/countries');
      }
      catch (PrintfulApiException $e) {
        watchdog('commerce_printful', 'Printful API Exception: %code %message', array('%code' => $e->getCode(), '%message' => $e->getMessage()));
      }
      catch (PrintfulException $e) {
        watchdog('commerce_printful', 'Printful Exception: %message', array('%message' => $e->getMessage()));
        watchdog('commerce_printful', $pf->getLastResponseRaw());
      }

      if (!empty($response) && is_array($response)) {
        foreach ($response as $tax_country) {
          if (!empty($tax_country['code']) && $tax_country['code'] == 'US' && !empty($tax_country['states']) && is_array($tax_country['states'])) {
            foreach ($tax_country['states'] as $tax_state) {
              if (!empty($tax_state['code']) && !empty($tax_state['name'])) {
                $taxable_states[$tax_state['code']] = array(
                  'name' => $tax_state['name'],
                  'shipping_taxable' => (!empty($tax_state['shipping_taxable'])),
                );
              }
            }
          }
        }
      }

    }
  }

  return $taxable_states;
}

/**
 * Implements hook_commerce_tax_type_calculate_rates().
 *
 * Checks an order for a shipping address matching states where
 * Printful operates fulfillment centers and adds the tax costs
 * to orders accordingly.
 */
function commerce_printful_commerce_tax_type_calculate_rates($tax_type, $line_item) {
  // Is this a sales tax calculation?
  if ($tax_type['name'] != 'sales_tax') {
    return;
  }

  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  // Is this a product?
  if (!$line_item_wrapper->__isset('commerce_product')) {
    return;
  }

  // Is this a Printful item?
  $product = commerce_product_load($line_item_wrapper->commerce_product->raw());
  if ($product->type != 'printful') {
    return;
  }

  // Remove any existing taxes added to this item.
  $data = $line_item_wrapper->commerce_unit_price->data->value();
  if (!empty($data) && is_array($data['components'])) {
    foreach ($data['components'] as $component) {
      if (strpos($component['name'], 'tax') === 0) {
        $line_item_wrapper->commerce_unit_price->data = commerce_price_component_delete(
          $line_item_wrapper->commerce_unit_price->value(),
          $component['name']
        );
      }
    }
  }

  $taxable_states = commerce_printful_taxable_states();
  $order = $line_item_wrapper->order->value();
  $shipping_address = commerce_printful_get_order_shipping_address($order);

  // Do we have the required shipping address values?
  if (empty($shipping_address['administrative_area']) || !in_array($shipping_address['administrative_area'], array_keys($taxable_states))) {
    return;
  }

  $tax_rate = commerce_printful_tax_rate($order);
  if (!empty($tax_rate)) {

    $tax_state = $taxable_states[$shipping_address['administrative_area']];
    $type = 'printful_tax';

    $price = $line_item_wrapper->commerce_unit_price->value();
    $amount = commerce_round(COMMERCE_ROUND_HALF_UP, ($price['amount'] * $tax_rate['rate']));

    $component_price = array(
      'amount' => $amount,
      'currency_code' => $price['currency_code'],
      'data' => array(),
    );

    // Add the tax component to the line item.
    $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add($price, $type, $component_price, FALSE);

  }
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_printful_commerce_price_component_type_info() {
  $title = t('Sales tax');
  return array(
    'printful_tax' => array(
      'title' => $title,
      'display_title' => $title,
    ),
  );
}

/**
 * Implements hook_commerce_checkout_complete().
 *
 * Prepares the request and submits the final order to Printful
 * for fulfillment.
 */
function commerce_printful_commerce_checkout_complete($order) {

  if (!commerce_printful_is_printful_order($order)) {
    return;
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $order_wrapper->commerce_order_total->currency_code->value();

  // Prepare the Printful request.
  $items = array();
  $shipping_data = array();

  $order_totals = $order_wrapper->commerce_order_total->value();

  $order_total = commerce_currency_amount_to_decimal($order_totals['amount'], $currency_code);

  $order_subtotal = commerce_price_component_total($order_totals, 'base_price');
  $order_subtotal = commerce_currency_amount_to_decimal($order_subtotal['amount'], $currency_code);

  $order_shipping = commerce_price_component_total($order_totals, 'shipping');
  $order_shipping = commerce_currency_amount_to_decimal($order_shipping['amount'], $currency_code);

  $order_tax = 0;
  foreach ($order_totals['data']['components'] as $component) {
    if (substr($component['name'], 0, 3) == 'tax') {
      $order_tax = commerce_round(COMMERCE_ROUND_HALF_UP, $component['price']['amount']);
    }
  }
  $order_tax = commerce_currency_amount_to_decimal($order_tax, $currency_code);

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $product = commerce_product_load($line_item_wrapper->commerce_product->raw());
      if ($product->type == 'printful') {
        $product_wrapper = entity_metadata_wrapper('commerce_product', $product);

        $mockup_url = NULL;
        $mockup = $product_wrapper->field_printful_mockups[0]->value();
        if ($mockup) {
          $style = 'large';
          $style_uri = image_style_path($style, $mockup['uri']);
          $success = file_exists($style_uri) || image_style_create_derivative(image_style_load($style), $mockup['uri'], $style_uri);
          $mockup_url = file_create_url($style_uri);
        }

        $price = $line_item_wrapper->commerce_unit_price->value();

        $items[] = array(
          'variant_id' => $product_wrapper->field_printful_variant_id->value(),
          'external_id' => $line_item_wrapper->line_item_id->value(),
          'name' => $product->title,
          'sku' => $product->sku,
          'quantity' => (int) $line_item_wrapper->quantity->value(),
          'retail_price' => commerce_currency_amount_to_decimal($price['amount'], $currency_code),
          'files' => array(
            array('url' => $mockup_url),
          ),
        );

      }
    }
    elseif ($line_item_wrapper->type->value() == 'shipping') {
      $shipping_data = $line_item_wrapper->value()->data;
    }
  }

  // Get the shipping address.
  $shipping_address = commerce_printful_get_order_shipping_address($order);

  // Get the full list of Printful shipping services.
  $printful_shipping_services = commerce_printful_shipping_service_list();

  // Get the shipping method.
  $shipping_method = NULL;
  foreach ($printful_shipping_services as $machine_name => $service) {
    if (!empty($service['request_name']) && !empty($shipping_data['shipping_service'])) {
      if (
        (!empty($service['commerce_shipping_id']) && $shipping_data['shipping_service']['name'] == $service['commerce_shipping_id'])
          ||
        $shipping_data['shipping_service']['name'] == $machine_name
      ) {
        $shipping_method = $service['request_name'];
      }
    }
  }

  // Create the Printful order request array.
  $request = array(
    'external_id' => $order->order_id,
    'status' => 'draft',
    'shipping' => (!empty($shipping_method) ? $shipping_method : 'STANDARD'),
    'recipient' => array(
      'name' => $shipping_address['name_line'],
      'address1' => $shipping_address['thoroughfare'],
      'city' => $shipping_address['locality'],
      'state_code' => $shipping_address['administrative_area'],
      'country_code' => $shipping_address['country'],
      'zip' => $shipping_address['postal_code'],
    ),
    'items' => $items,
    'retail_costs' => array(
      'subtotal' => $order_subtotal,
      'shipping' => $order_shipping,
      'tax' => $order_tax,
      'total' => $order_total,
    ),
  );

  // Submit the request to Printful.
  $pf = new PrintfulApiClient(variable_get('commerce_printful_api_key', ''));
  try {
    // Post the order to Printful.
    $response = $pf->post('orders', $request);
    watchdog('commerce_printful', 'Order %order_id successfully sent to Printful.', array('%order_id' => $order->order_id));
  }
  catch (PrintfulApiException $e) {
    watchdog('commerce_printful', 'Printful API Exception: %code %message', array('%code' => $e->getCode(), '%message' => $e->getMessage()));
  }
  catch (PrintfulException $e) {
    watchdog('commerce_printful', 'Printful Exception: %message', array('%message' => $e->getMessage()));
    watchdog('commerce_printful', $pf->getLastResponseRaw());
  }

  // TODO:
  // Here we might consider updating the order status and/or sending an
  // email if the submission to Printful fails.
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function commerce_printful_commerce_shipping_method_info() {
  return array(
    'printful' => array(
      'title' => t('Printful'),
      'description' => t('Printful shipping services.'),
    ),
  );
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function commerce_printful_commerce_shipping_service_info() {

  $available = commerce_printful_shipping_service_list();
  $enabled = variable_get('commerce_printful_shipping_services', array());
  $registered_services = array();

  // Add enabled Printful shipping services to the commerce_shipping
  // service info.
  foreach ($enabled as $machine_name => $service) {
    if ($service) {
      $registered_services[$machine_name] = array(
        'title' => $available[$machine_name]['title'],
        'description' => $available[$machine_name]['title'],
        'display_title' => $available[$machine_name]['title'],
        'shipping_method' => 'printful',
        'price_component' => 'shipping',
        'callbacks' => array(
          'rate' => 'commerce_printful_shipping_rate',
        ),
      );
    }
  }

  return $registered_services;

}

/**
 * Returns a base price array for a shipping service calculated for the order.
 *
 * @param array $service
 *   An array describing the shipping service.
 * @param object $order
 *   The order object.
 *
 * @return array
 *   The service rates returned from Printful
 */
function commerce_printful_shipping_rate(array $service, $order) {
  // Attempt to recover cached shipping rates.
  $rates = commerce_shipping_rates_cache_get('printful', $order, variable_get('commerce_printful_shipping_rates_timeout', 0));

  // If no cached rates were found or they have expired.
  if (!is_array($rates) && commerce_printful_validate_order($order)) {

    $shipping_address = commerce_printful_get_order_shipping_address($order);
    $rates = commerce_printful_get_printful_shipping($order, $shipping_address);
    commerce_shipping_rates_cache_set('printful', $order, (array) $rates);

  }

  // Return the rate for the requested service or FALSE if not found.
  return isset($rates[$service['name']]) ? $rates[$service['name']] : FALSE;
}

/**
 * Validate that the order can return a successful rate request.
 *
 * @param object $order
 *   The order object.
 *
 * @return bool
 *   Returns TRUE if the order passes validation.
 */
function commerce_printful_validate_order($order) {
  $shipping_address = commerce_printful_get_order_shipping_address($order);

  // We have to have a shipping address to get rates.
  if (empty($shipping_address)) {
    return FALSE;
  }

  // US shipping addresses require a zipcode.
  if ($shipping_address['country'] == 'US' && empty($shipping_address['postal_code'])) {
    return FALSE;
  }

  // Make sure the order has no other shippable items.
  if (module_exists('commerce_physical')) {
    $weight = commerce_physical_order_weight($order, 'lb');
    if (!empty($weight['weight'])) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Get the shipping address of the order.
 */
function commerce_printful_get_order_shipping_address($order) {

  $shipping_address = array();
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Determine the shipping profile reference field name for the order.
  $field_name = NULL;

  if (!empty($order->commerce_customer_shipping)) {
    $field_name = 'commerce_customer_shipping';
  }
  else {
    // Look for customer profile references fields available for the order.
    foreach (field_info_instances('commerce_order', $order->type) as $instance_name => $instance) {
      // Load the field info for the current instance.
      $field = field_info_field($instance['field_name']);

      // If it's of the proper type...
      if ($field['type'] == 'commerce_customer_profile_reference') {
        // Save its name and exit the loop if it isn't the billing profile.
        $field_name = $instance_name;

        if ($field_name != 'commerce_customer_billing') {
          break;
        }
      }
    }
  }

  // Prepare the shipping address for use in the request.
  if (!empty($order_wrapper->{$field_name}->commerce_customer_address)) {
    $shipping_address = $order_wrapper->{$field_name}->commerce_customer_address->value();
  }

  return $shipping_address;
}

/**
 * Look up a Printful shipping service by its id.
 */
function commerce_printful_shipping_service_by_id($id) {
  foreach (commerce_printful_shipping_service_list() as $machine_name => $service) {
    if ($service['request_name'] == $id) {
      return array_merge(array('machine_name' => $machine_name), $service);
    }
  }
}

/**
 * Returns an array of Printful shipping services and related data.
 *
 * @return array
 *   Printful shipping service data.
 */
function commerce_printful_shipping_service_list() {
  $services = array(
    'printful_standard' => array(
      'request_name' => 'STANDARD',
      'title' => t('Flat Rate'),
      'id' => 0,
    ),
    'printful_fedex_ground' => array(
      'request_name' => 'FEDEX_GROUND',
      'title' => t('FedEx Ground'),
      'id' => 1,
    ),
    'printful_fedex_ground_home' => array(
      'request_name' => 'FEDEX_GROUND_HOME_DELIVERY',
      'title' => t('FedEx Ground Home Delivery'),
      'id' => 2,
    ),
    'printful_fedex_smart_post' => array(
      'request_name' => 'FEDEX_SMART_POST',
      'title' => t('FedEx SmartPost'),
      'id' => 3,
    ),
    'printful_usps_parcelselect' => array(
      'request_name' => 'USPS_PARCELSELECT',
      'title' => t('USPS ParcelSelect'),
      'id' => 4,
    ),
    'printful_usps_first' => array(
      'request_name' => 'USPS_FIRST',
      'title' => t('USPS First Class Mail'),
      'id' => 5,
      'commerce_shipping_id' => 'usps_first_class',
    ),
    'printful_usps_priority' => array(
      'request_name' => 'USPS_PRIORITY',
      'title' => t('USPS Priority Mail'),
      'id' => 6,
      'commerce_shipping_id' => 'usps_priority_mail',
    ),
    'printful_usps_first_intl' => array(
      'request_name' => 'USPS_FIRSTCLASSPACKAGEINTERNATIONALSERVICE',
      'title' => t("USPS First Class Package Int'l"),
      'id' => 7,
    ),
    'printful_intl_economy_no_track' => array(
      'request_name' => 'APC_PARCEL_CONNECT',
      'title' => t("Int'l Economy without tracking"),
      'id' => 8,
    ),
    'printful_intl_economy_with_track' => array(
      'request_name' => 'APC_PARCEL_CONFIRM',
      'title' => t("Int'l Economy with tracking"),
      'id' => 9,
    ),
    'printful_intl_economy_duty_paid' => array(
      'request_name' => 'APC_PARCEL_DDP_CONFIRM',
      'title' => t("Int'l Economy Duties paid with tracking"),
      'id' => 10,
    ),
    'printful_fedex_2day' => array(
      'request_name' => 'FEDEX_2_DAY',
      'title' => t('FedEx 2 Day'),
      'id' => 11,
    ),
    'printful_fedex_std_overnight' => array(
      'request_name' => 'FEDEX_STANDARD_OVERNIGHT',
      'title' => t('FedEx Standard Overnight'),
      'id' => 12,
    ),
    'printful_fedex_intl_economy' => array(
      'request_name' => 'FEDEX_INTERNATIONAL_ECONOMY',
      'title' => t('FedEx International Economy'),
      'id' => 13,
    ),
    'printful_fedex_intl_priority' => array(
      'request_name' => 'FEDEX_INTERNATIONAL_PRIORITY',
      'title' => t('FedEx International Priority'),
      'id' => 14,
    ),
    'printful_priority_intl' => array(
      'request_name' => 'USPS_PRIORITYMAILINTERNATIONAL',
      'title' => t("UPSP Priority Mail Int'l"),
      'id' => 15,
      'commerce_shipping_id' => 'usps_pmi',
    ),
  );
  return $services;
}

/**
 * Implements hook_element_info_alter().
 */
function commerce_printful_element_info_alter(&$type) {
  if (isset($type['media'])) {
    $type['media']['#process'][] = 'commerce_printful_media_element_process';
  }
}

/**
 * Process callback for the media form element.
 */
function commerce_printful_media_element_process($element, &$form_state, $form) {
  if (isset($element['#field_name'])) {
    switch ($element['#field_name']) {
      case 'field_printful_print_files':

        $product_id = isset($element['#entity']) ? $element['#entity']->product_id : 0;
        $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : 0;

        $wrapper = entity_metadata_wrapper('commerce_product', $element['#entity']);

        if ($wrapper->field_printful_print_files->count() > 0) {
          $element['settings'] = array(
            '#type' => 'link',
            '#href' => 'commerce-printful/print-file-settings/' . $product_id . '/' . $fid . '/' . $element['#weight'] . '/nojs',
            '#title' => t('Settings'),
            '#attributes' => array(
              'class' => array(
                'ctools-use-modal',
                'ctools-modal-commerce-printful-print-file-settings', 'button', 'settings',
              ),
            ),
            '#weight' => 20,
            '#access' => $element['#file'] ? file_entity_access('update', $element['#file']) : FALSE,
          );

          $element['generate_mockups_button'] = array(
            '#name' => implode('_', $element['#parents']) . '_generate_button',
            '#type' => 'submit',
            '#value' => t('Generate mockup images'),
            '#validate' => array(),
            '#submit' => array('commerce_printful_call_generate_mockups'),
            '#weight' => 40,
            '#access' => $element['#file'] ? file_entity_access('update', $element['#file']) : FALSE,
            '#attributes' => array('class' => array('remove')),
          );
        }

        break;

      case 'field_printful_mockups':
        $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : 0;
        $file = file_load($fid);
        if ($file) {
          $file_url = file_create_url($file->uri);
          $element['preview']['#prefix'] .= '<a href="' . $file_url . '">';
          $element['preview']['#suffix'] .= '</a>';
        }
        break;
    }
  }
  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_printful_form_commerce_product_ui_product_form_alter(&$form, $form_state) {

  $form['actions']['apply'] = array(
    '#type' => 'submit',
    '#value' => t('Apply changes'),
    '#submit' => array('commerce_product_product_form_submit', 'commerce_printful_form_commerce_product_ui_apply'),
    '#weight' => -1,
  );

  // Add a div to target for displaying status messages.
  $form['field_printful_print_files']['#prefix'] = '<div class="print-file-settings-message-wrapper"></div>';

}

/**
 * Submit handler for apply button.
 */
function commerce_printful_form_commerce_product_ui_apply(&$form, $form_state) {
  $product_id = $form['#entity']->product_id;
  unset($_GET['destination']);
  drupal_goto('admin/commerce/products/' . $product_id . '/edit');
}

/**
 * Submit handler to generate the mockup.
 */
function commerce_printful_call_generate_mockups(&$form, $form_state) {

  $product_id = $form['#entity']->product_id;
  $wrapper = entity_metadata_wrapper('commerce_product', $form['#entity']);
  $delta = abs((int) filter_var($form_state['clicked_button']['#name'], FILTER_SANITIZE_NUMBER_INT));
  $printfile_image = $wrapper->field_printful_print_files[$delta]->value();
  $api_key = variable_get('commerce_printful_api_key', '');

  $result = commerce_printful_generate_mockups($product_id, $printfile_image['fid'], $delta, $api_key);

  drupal_set_message(($result ? 'Mockup images added.' : 'Error generating mockups. Please check the system log for more details.'), 'status');
  unset($_GET['destination']);
  drupal_goto('admin/commerce/products/' . $product_id . '/edit');

}

/**
 * Mockup generator.
 */
function commerce_printful_generate_mockups($product_id, $fid, $delta, $api_key, $base_url) {

  $product = commerce_product_load($product_id);
  $wrapper = entity_metadata_wrapper('commerce_product', $product);

  $printful_product_id = $wrapper->field_printful_product_id->value();
  $printful_variant_id = $wrapper->field_printful_variant_id->value();

  // Get the printfiles for the product.
  $printfiles = commerce_printful_printfiles($printful_product_id, $api_key);

  // Find the printfile_id for this variant's front.
  $variant_printfile_id = NULL;
  if (!empty($printfiles['variant_printfiles'])) {
    foreach ($printfiles['variant_printfiles'] as $vpf) {
      if (!empty($vpf['variant_id']) && $vpf['variant_id'] == $printful_variant_id) {
        if (!empty($vpf['placements']['front'])) {
          $variant_printfile_id = $vpf['placements']['front'];
          break;
        }
      }
    }
  }

  // Get the printfile from the printfile_id.
  $printfile = NULL;
  if (!empty($variant_printfile_id) && !empty($printfiles['printfiles'])) {
    foreach ($printfiles['printfiles'] as $pf) {
      if (!empty($pf['printfile_id']) && $pf['printfile_id'] == $variant_printfile_id) {
        $printfile = $pf;
      }
    }
  }

  $printfile_image = $wrapper->field_printful_print_files[$delta]->value();
  $printfile_image_url = file_create_url($printfile_image['uri']);

  if (!empty($base_url)) {
    $printfile_image_url = $base_url . parse_url($printfile_image_url, PHP_URL_PATH);
  }

  $settings = db_select('commerce_printful_print_file_settings', 'pfs')
    ->fields('pfs', array('print_file_settings'))
    ->condition('pfs.product_id', $product->product_id)
    ->condition('pfs.fid', $printfile_image['fid'])
    ->condition('pfs.delta', $delta)
    ->execute()
    ->fetchField();
  $settings = unserialize($settings);

  $mockup_width = 0;
  $mockup_height = 0;

  $ratio = $printfile_image['width'] / $printfile_image['height'];
  $scale = isset($settings['scale_percentage']) ? ($settings['scale_percentage'] * .01) : 0;

  if ($printfile['width'] / $printfile['height'] > $ratio) {
    $mockup_width = round($printfile['height'] * $ratio);
    $mockup_height = $printfile['height'];
  }
  else {
    $mockup_height = round($printfile['width'] / $ratio);
    $mockup_width = $printfile['width'];
  }

  // Submit the task.
  $pf = new PrintfulApiClient($api_key);
  $generator = new PrintfulMockupGenerator($pf);

  $parameters = new MockupGenerationParameters();
  $parameters->format = $parameters::FORMAT_PNG;
  $parameters->productId = $printful_product_id;
  $parameters->variantIds = array($printful_variant_id);

  $scaled_width = ($mockup_width - ($mockup_width * $scale));
  $scaled_height = ($mockup_height - ($mockup_height * $scale));

  $width_difference = $printfile['width'] - $scaled_width;
  $height_difference = $printfile['height'] - $scaled_height;

  $center_vertically = isset($settings['center_vertically']) ? ($settings['center_vertically'] * .01) : 0;
  $center_horizontally = isset($settings['center_horizontally']) ? ($settings['center_horizontally'] * .01) : 0;

  $left_offset = isset($settings['left_offset']) ? $settings['left_offset'] : 0;
  $top_offset = isset($settings['top_offset']) ? $settings['top_offset'] : 0;

  $position = new MockupPositionItem();
  $position->areaWidth = $printfile['width'];
  $position->areaHeight = $printfile['height'];
  $position->width = $scaled_width;
  $position->height = $scaled_height;

  $position->top = !empty($center_vertically) ? ($height_difference / 2) : $top_offset;
  $position->left = !empty($center_horizontally) ? ($width_difference / 2) : $left_offset;

  $parameters->addImageUrl(Placements::TYPE_FRONT, $printfile_image_url, $position);

  try {
    $result = $generator->createGenerationTaskAndWaitForResult($parameters)->mockupList;
  }
  catch (PrintfulApiException $e) {
    watchdog('commerce_printful', 'Printful API Exception: %code %message', array('%code' => $e->getCode(), '%message' => $e->getMessage()));
    return FALSE;
  }
  catch (PrintfulException $e) {
    watchdog('commerce_printful', 'Printful Exception: %message', array('%message' => $e->getMessage()));
    watchdog('commerce_printful', $pf->getLastResponseRaw());
    return FALSE;
  }

  $mockup_images = array();
  if (!empty($result)) {
    if (!empty($result->mockups[0])) {
      $mockup_images[] = $result->mockups[0]->mockupUrl;
    }
    if (!empty($result->mockups[0]->extraMockups) && is_array($result->mockups[0]->extraMockups)) {
      foreach ($result->mockups[0]->extraMockups as $extra_mockup) {
        $mockup_images[] = $extra_mockup->url;
      }
    }
  }

  $mockup_field_instance = field_info_instance('commerce_product', 'field_mockup_images', 'printful');
  $destination = 'public://' . (!empty($mockup_field_instance['settings']['file_directory']) ? $mockup_field_instance['settings']['file_directory'] : '');
  file_prepare_directory($destination, FILE_CREATE_DIRECTORY);

  // TODO
  // Switch to system_retrieve_file()
  //
  $mockup_files = array();
  foreach ($mockup_images as $delta => $mockup_image) {
    $image = file_get_contents($mockup_image);
    if ($image) {
      $file = file_save_data($image, $destination . '/' . basename($mockup_image), FILE_EXISTS_REPLACE);
      $mockup_files[] = (array) $file;
    }
  }

  $wrapper->field_printful_mockups->set($mockup_files);
  $wrapper->save();

  return TRUE;
}

/**
 * Get printfiles data for a Printful product.
 */
function commerce_printful_printfiles($printful_product_id = 0, $api_key = '') {
  $printfiles = array();
  if (!empty($printful_product_id)) {
    $pf = new PrintfulApiClient($api_key);
    try {
      $printfiles = $pf->get('mockup-generator/printfiles/' . $printful_product_id);
    }
    catch (PrintfulApiException $e) {
      drupal_set_message('Printful API Exception: %code %message', array('%code' => $e->getCode(), '%message' => $e->getMessage()), 'error');
    }
    catch (PrintfulException $e) {
      drupal_set_message('Printful Exception: %message', array('%message' => $e->getMessage()), 'error');
      drupal_set_message($pf->getLastResponseRaw(), 'error');
    }
  }
  return $printfiles;
}

/**
 * CTools modal callback for editing a file.
 */
function commerce_printful_print_file_settings_modal($form, &$form_state, $product_id, $fid, $delta, $js) {
  ctools_include('modal');
  ctools_include('ajax');

  $form_state = array(
    'title' => t('Settings'),
    'ajax' => $js,
    'build_info' => array(
      'args' => array(
        '0' => $product_id,
        '1' => $fid,
        '2' => $delta,
      ),
    ),
  );

  $output = ctools_modal_form_wrapper('commerce_printful_print_file_settings_form', $form_state);

  if ($js) {
    $commands = $output;

    if ($form_state['executed']) {
      $commands = array(ctools_modal_command_dismiss());
      drupal_set_message(t('Settings saved.'), 'status');
      $commands[] = ajax_command_html('.print-file-settings-message-wrapper', theme('status_messages'));
    }

    print ajax_render($commands);
    exit();
  }

  // Otherwise, just return the output.
  return $output;
}

/**
 * Provides the print file settings form.
 */
function commerce_printful_print_file_settings_form($form, $form_state) {

  if (!is_array($form_state['build_info']['args']) || count($form_state['build_info']['args']) != 3) {
    return;
  }

  $product_id = $form_state['build_info']['args'][0];
  $fid = $form_state['build_info']['args'][1];
  $delta = $form_state['build_info']['args'][2];

  $settings = db_select('commerce_printful_print_file_settings', 'pfs')
    ->fields('pfs', array('print_file_settings'))
    ->condition('pfs.product_id', $product_id)
    ->condition('pfs.fid', $fid)
    ->condition('pfs.delta', $delta)
    ->execute()
    ->fetchField();
  $settings = unserialize($settings);

  $placement_options = array(
    'front' => t('Front'),
    'back' => t('Back'),
  );

  $form['placement'] = array(
    '#title' => t('Placement'),
    '#type' => 'select',
    '#description' => t('Determines the placement of the print file on the product.'),
    '#options' => $placement_options,
    '#default_value' => isset($settings['placement']) ? $settings['placement'] : 'front',
  );

  $form['scale_percentage'] = array(
    '#type' => 'textfield',
    '#title' => t('Scale percentage'),
    '#size' => 4,
    '#field_suffix' => '%',
    '#maxlength' => 2,
    '#description' => t('Scales down the print file relative to the full print area.'),
    '#default_value' => isset($settings['scale_percentage']) ? $settings['scale_percentage'] : 0,
  );

  $form['center_vertically'] = array(
    '#type' => 'checkbox',
    '#title' => t('Center vertically'),
    '#description' => t('Centers the print file relative to the full print area.'),
    '#default_value' => isset($settings['center_vertically']) ? $settings['center_vertically'] : NULL,
  );

  $form['center_horizontally'] = array(
    '#type' => 'checkbox',
    '#title' => t('Center horizontally'),
    '#description' => t('Centers the print file relative to the full print area.'),
    '#default_value' => isset($settings['center_horizontally']) ? $settings['center_horizontally'] : NULL,
  );

  $form['left_offset'] = array(
    '#type' => 'textfield',
    '#title' => t('Left offset'),
    '#size' => 4,
    '#field_suffix' => 'px',
    '#description' => t('Positions the print file this number of pixels from the left side of the print area. The value is ignored when center horizontally is checked.'),
    '#default_value' => isset($settings['left_offset']) ? $settings['left_offset'] : 0,
  );

  $form['top_offset'] = array(
    '#type' => 'textfield',
    '#title' => t('Top offset'),
    '#size' => 4,
    '#field_suffix' => 'px',
    '#description' => t('Positions the print file this number of pixels from the top of the print area. The value is ignored when center vertically is checked.'),
    '#default_value' => isset($settings['top_offset']) ? $settings['top_offset'] : 0,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Settings for submit handler.
 */
function commerce_printful_print_file_settings_form_submit($form, $form_state) {

  if (!is_array($form_state['build_info']['args']) || count($form_state['build_info']['args']) != 3) {
    return;
  }

  $product_id = $form_state['build_info']['args'][0];
  $fid = $form_state['build_info']['args'][1];
  $delta = $form_state['build_info']['args'][2];

  $values = array(
    'placement',
    'scale_percentage',
    'center_vertically',
    'center_horizontally',
    'left_offset',
    'top_offset',
  );

  $settings = array();
  foreach ($values as $value) {
    $settings[$value] = isset($form_state['values'][$value]) ? $form_state['values'][$value] : NULL;
  }

  db_delete('commerce_printful_print_file_settings')
    ->condition('product_id', $product_id)
    ->condition('fid', $fid)
    ->condition('delta', $delta)
    ->execute();

  db_insert('commerce_printful_print_file_settings')
    ->fields(array(
      'product_id' => $product_id,
      'fid' => $fid,
      'delta' => $delta,
      'print_file_settings' => serialize($settings),
    ))
    ->execute();

}
